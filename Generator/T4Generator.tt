<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="ConsoleApp1" #>
<#@ import namespace="ConsoleApp1.InfoClass" #>

using System.Collections.Generic;
using Egar.Focus.DealModule.Fields;
using Egar.Focus.Framework.Types;

namespace ConsoleApp1
{
	<#
		foreach(var entityInfo in entity){
	#>
	public class <#=entityInfo.className#>_Graph : GraphBase
	{
		(<#= entityInfo.classFullName #>)Entity;//полное имя к классу entity 

		public <#=entityInfo.className#>_Graph(FieldsEntity entity/*, EntityExtentionBase extention*/) :base(entity/*, extention*/)//название entity класса +_Graph в качестве имени
		{
			this.Entity= (<#= entityInfo.className #>)entity;
		}

		protected override Dictionary<string, List<CalcFieldInfo>> CreateCalcOrder()
        {
			var calcOrder = new Dictionary<string, List<CalcFieldInfo>>()
			{
				#region input order
				{"", new List<CalcFieldInfo>()
					{//пройдемся по всем значениям дикшнари с зависимостями.
						<#
							foreach(var field in entityInfo.lFieldInfo.Values){
						#>//1 параметр- Entity.+ тип филда, второй- лист зависимостей
						new CalcFieldInfo(Entity.<#= field.TypeField #>, new List<FieldBase>(){<# addField(field.lParamInfo); #>}),
						<#
                            }
						#>
					}
				}
				#endregion input order
			}
		} 
	}
	<#
        }
	#>
}
// List<ParamInfo> lParamInfo- лист зависимостей филда. параметр типа? передается в сгенерированный лист
<#+ 
	void addField(List<ParamInfo> lParamInfo){
		int i=0;
		foreach(var param in lParamInfo)
		{
#>
<#= param.FieldType #> <#+ if(i+1<lParamInfo.Count)#>,

<#+
			i++;
        }
    }
#>