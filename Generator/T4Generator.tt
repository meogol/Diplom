<#@ template language="C#" #>
<#@ assembly name="System.Core" #>

<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="GraphGeneratorUtil" #>
<#@ import namespace="GraphGeneratorUtil.InfoClass" #>
<#@ import namespace="Egar.Focus.Framework.Utils" #>

using System.Collections.Generic;
using Egar.Focus.DealModule.Fields;
using Egar.Focus.Framework.Types;

namespace GraphGeneratorUtil
{
	<#
	foreach(var node in hierarhy)
	{
		var classInfo = node.entity;
			
	#>	
	public class <#=classInfo.className#>_Graph : GraphBase
	{	
		(<#= classInfo.classFullName #>)Entity;

		public <#=classInfo.className#>_Graph(FieldsEntity entity/*, EntityExtentionBase extention*/) :base(entity/*, extention*/)
		{
			this.Entity= (<#= classInfo.className #>)entity;
		}
		
		#region define order

		protected Dictionary<string, List<CalcFieldInfo>> CreateCalcOrder()
		{
			var calcOrder = new Dictionary<string, List<CalcFieldInfo>>()
			{
			<#	
					var graph =CreateFieldsGraph(classInfo.lFieldInfo);//граф зависимостей
					var startFields = new List<string>() {""};//набор стартовых филдов + "" - это типа порядок ввода + когда всю сделку нужно пересчитаться
					startFields.AddRange(classInfo.lFieldInfo.Keys);
					foreach(var startField in startFields)
					{
			#>
				#region <#=startField==""?"input order":startField#>
                {"<#=startField#>", new List<CalcFieldInfo>()
					{
			<#
			List<string> fieldsToCalc = null;
			if(startField=="")
			{
				fieldsToCalc = new List<string>() {"DealType", "InstrType", "TradeType"}; // хардкод ключевых полей, которые надо в первую очередь установить
				fieldsToCalc.RemoveAll(f=>!classInfo.lFieldInfo.ContainsKey(f));
				List<string> sortOrder = new List<string>(OrientedGraph.TopologicSort(graph, null).Cast<string>().ToList());
				fieldsToCalc.AddRange(sortOrder.Where(p=> !fieldsToCalc.Contains(p)));
            }
			else
			{
				OrientedGraph subGraph = OrientedGraph.GetSubGraph(graph, startField, TransOrientation.Out);
				subGraph.RemoveInTrans(startField);
				fieldsToCalc = subGraph.RecursiveTopologicSort(startField).Cast<string>().ToList();
			}
				
			var visitedFields=new List<FieldInfo>();//филды в которых мы побывали по ходу расчета
			if(startField!="")
				visitedFields.Add(classInfo.lFieldInfo[startField]);
			
			foreach(string fldName in fieldsToCalc)
			{
				if(fldName == startField)//граф возвращает стартовый филд в составе цепочки
					continue;
				var field = classInfo.lFieldInfo[fldName];
				visitedFields.Add(field);

				string funcName = null;// название функции которой необходимо посчитаться
				var calcFromParams = new List<FieldInfo>();//филды которые привели к пересчету данного филда
				if(startField!="")
					visitedFields.Add(classInfo.lFieldInfo[startField]);
				
				
				var calcFromParamsStr = string.Join(",", calcFromParams.Select(f=>f.Name).ToArray());
				if(funcName!=null)
				{
#>
							new CalcFieldInfo(<#=fldName#>, (e)=> <#=fldName+"."+funcName#>(e), new List<FieldBase>(){<#=calcFromParamsStr#>}),
<#
				}
				else
				{
#>
							new CalcFieldInfo(<#=fldName#>, new List<FieldBase>(){<#=calcFromParamsStr#>}),
<#
				}
			}//перебор филдов к расчету
			#>	
					}
				},
				#endregion <#=startField==""?"input order":startField#>
						
				

				
<# 				
					}
#>			
			};//new Dictionary
		 
			return calcOrder;
		}
	}
		#endregion //define order
<#
        }//foreach entityInfo
#>
}
<#+ 
	/// <summary>
	/// fields dependencies graph
	/// </summary>
	private OrientedGraph CreateFieldsGraph(Dictionary<String, FieldInfo> fields)
	{
		OrientedGraph FieldsGraph = new OrientedGraph(); // граф зависимости полей сделки
		
		// add graph nodes
		foreach (var field in fields.Keys)
		{
			FieldsGraph.AddNode(field);
			
			// add graph transitions
			foreach (var fieldList in fields.Values)
			{
				// nH. Пропустить ребра, направленные в поле, которое изменилось.
				//if (startField != null && !startField.Equals(field.Name, StringComparison.Ordinal))
			
				foreach (var param in fieldList.lParamInfo.Where(p=>!p.IsDeleted))
				{
					if (param != null && FieldsGraph.ContainsNode(param.FieldName))
					{
						FieldsGraph.AddInTrans(field, param.FieldName);
					}
				}
			
			}
        }
		return FieldsGraph;

	}

#>