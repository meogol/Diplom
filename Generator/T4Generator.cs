// ------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Версия среды выполнения: 15.0.0.0
//  
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторного создания кода.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace ConsoleApp1.Generator
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using ConsoleApp1;
    using ConsoleApp1.InfoClass;
    using Egar.Focus.Framework.Utils;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Users\Вера\source\repos\ConsoleApp1\ConsoleApp1\Generator\T4Generator.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public partial class T4Generator : T4GeneratorBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("\r\nusing System.Collections.Generic;\r\nusing Egar.Focus.DealModule.Fields;\r\nusing E" +
                    "gar.Focus.Framework.Types;\r\n\r\nnamespace ConsoleApp1\r\n{\r\n\t");
            
            #line 17 "C:\Users\Вера\source\repos\ConsoleApp1\ConsoleApp1\Generator\T4Generator.tt"

		foreach(var entityInfo in entity){
			
	
            
            #line default
            #line hidden
            this.Write("\t\r\n\tpublic class ");
            
            #line 21 "C:\Users\Вера\source\repos\ConsoleApp1\ConsoleApp1\Generator\T4Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(entityInfo.className));
            
            #line default
            #line hidden
            this.Write("_Graph : GraphBase\r\n\t{\t\r\n\t\t(");
            
            #line 23 "C:\Users\Вера\source\repos\ConsoleApp1\ConsoleApp1\Generator\T4Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(entityInfo.classFullName));
            
            #line default
            #line hidden
            this.Write(")Entity;\r\n\r\n\t\tpublic ");
            
            #line 25 "C:\Users\Вера\source\repos\ConsoleApp1\ConsoleApp1\Generator\T4Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(entityInfo.className));
            
            #line default
            #line hidden
            this.Write("_Graph(FieldsEntity entity/*, EntityExtentionBase extention*/) :base(entity/*, ex" +
                    "tention*/)\r\n\t\t{\r\n\t\t\tthis.Entity= (");
            
            #line 27 "C:\Users\Вера\source\repos\ConsoleApp1\ConsoleApp1\Generator\T4Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(entityInfo.className));
            
            #line default
            #line hidden
            this.Write(")entity;\r\n\t\t}\r\n\t\t\r\n\t\t#region define order\r\n\r\n\t\tprotected Dictionary<string, List<" +
                    "CalcFieldInfo>> CreateCalcOrder()\r\n\t\t{\r\n\t\t\tvar calcOrder = new Dictionary<string" +
                    ", List<CalcFieldInfo>>()\r\n\t\t\t{\r\n\t\t\t");
            
            #line 36 "C:\Users\Вера\source\repos\ConsoleApp1\ConsoleApp1\Generator\T4Generator.tt"
	
					var graph =CreateFieldsGraph(entityInfo.lFieldInfo);//граф зависимостей
					var startFields = new List<string>() {""};//набор стартовых филдов + "" - это типа порядок ввода + когда всю сделку нужно пересчитаться
					startFields.AddRange(entityInfo.lFieldInfo.Keys);
					foreach(var startField in startFields)
					{
			
            
            #line default
            #line hidden
            this.Write("\t\t\t\t#region ");
            
            #line 43 "C:\Users\Вера\source\repos\ConsoleApp1\ConsoleApp1\Generator\T4Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(startField==""?"input order":startField));
            
            #line default
            #line hidden
            this.Write("\r\n                {\"");
            
            #line 44 "C:\Users\Вера\source\repos\ConsoleApp1\ConsoleApp1\Generator\T4Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(startField));
            
            #line default
            #line hidden
            this.Write("\", new List<CalcFieldInfo>()\r\n\t\t\t\t\t{\r\n\t\t\t");
            
            #line 46 "C:\Users\Вера\source\repos\ConsoleApp1\ConsoleApp1\Generator\T4Generator.tt"

			List<string> fieldsToCalc = null;
			if(startField=="")
			{
				fieldsToCalc = new List<string>() {"DealType", "InstrType", "TradeType"}; // хардкод ключевых полей, которые надо в первую очередь установить
				fieldsToCalc.RemoveAll(f=>!entityInfo.lFieldInfo.ContainsKey(f));
				List<string> sortOrder = new List<string>(OrientedGraph.TopologicSort(graph, null).Cast<string>().ToList());
				fieldsToCalc.AddRange(sortOrder.Where(p=> !fieldsToCalc.Contains(p)));
            }
			else
			{
				OrientedGraph subGraph = OrientedGraph.GetSubGraph(graph, startField, TransOrientation.Out);
				subGraph.RemoveInTrans(startField);
				fieldsToCalc = subGraph.RecursiveTopologicSort(startField).Cast<string>().ToList();
			}
				
			var visitedFields=new List<FieldInfo>();//филды в которых мы побывали по ходу расчета
			if(startField!="")
				visitedFields.Add(entityInfo.lFieldInfo[startField]);
			
			foreach(string fldName in fieldsToCalc)
			{
				if(fldName == startField)//граф возвращает стартовый филд в составе цепочки
					continue;
				var field = entityInfo.lFieldInfo[fldName];
				visitedFields.Add(field);

				string funcName = null;// название функции которой необходимо посчитаться
				var calcFromParams = new List<FieldInfo>();//филды которые привели к пересчету данного филда
				if(startField!="")
					visitedFields.Add(entityInfo.lFieldInfo[startField]);
				
				
				var calcFromParamsStr = string.Join(",", calcFromParams.Select(f=>f.Name).ToArray());
				if(funcName!=null)
				{

            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\tnew CalcFieldInfo(");
            
            #line 83 "C:\Users\Вера\source\repos\ConsoleApp1\ConsoleApp1\Generator\T4Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(fldName));
            
            #line default
            #line hidden
            this.Write(", (e)=> ");
            
            #line 83 "C:\Users\Вера\source\repos\ConsoleApp1\ConsoleApp1\Generator\T4Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(fldName+"."+funcName));
            
            #line default
            #line hidden
            this.Write("(e), new List<FieldBase>(){");
            
            #line 83 "C:\Users\Вера\source\repos\ConsoleApp1\ConsoleApp1\Generator\T4Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(calcFromParamsStr));
            
            #line default
            #line hidden
            this.Write("}),\r\n");
            
            #line 84 "C:\Users\Вера\source\repos\ConsoleApp1\ConsoleApp1\Generator\T4Generator.tt"

				}
				else
				{

            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\tnew CalcFieldInfo(");
            
            #line 89 "C:\Users\Вера\source\repos\ConsoleApp1\ConsoleApp1\Generator\T4Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(fldName));
            
            #line default
            #line hidden
            this.Write(", new List<FieldBase>(){");
            
            #line 89 "C:\Users\Вера\source\repos\ConsoleApp1\ConsoleApp1\Generator\T4Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(calcFromParamsStr));
            
            #line default
            #line hidden
            this.Write("}),\r\n");
            
            #line 90 "C:\Users\Вера\source\repos\ConsoleApp1\ConsoleApp1\Generator\T4Generator.tt"

				}
			}//перебор филдов к расчету
			
            
            #line default
            #line hidden
            this.Write("\t\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\t#endregion ");
            
            #line 96 "C:\Users\Вера\source\repos\ConsoleApp1\ConsoleApp1\Generator\T4Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(startField==""?"input order":startField));
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t\t\t\t\r\n\t\t\t\t\r\n\r\n\t\t\t\t\r\n");
            
            #line 101 "C:\Users\Вера\source\repos\ConsoleApp1\ConsoleApp1\Generator\T4Generator.tt"
 				
					}

            
            #line default
            #line hidden
            this.Write("\t\t\t\r\n\t\t\t};//new Dictionary\r\n\t\t }\r\n\treturn calcOrder;\r\n\t\t}\r\n\t}\r\n\t\t#endregion //def" +
                    "ine order\r\n");
            
            #line 110 "C:\Users\Вера\source\repos\ConsoleApp1\ConsoleApp1\Generator\T4Generator.tt"

        }//foreach entityInfo

            
            #line default
            #line hidden
            this.Write("\t\t\t\t\r\n\t\t\t\t\r\n\t}\r\n}\r\n");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 117 "C:\Users\Вера\source\repos\ConsoleApp1\ConsoleApp1\Generator\T4Generator.tt"
 
	/// <summary>
	/// fields dependencies graph
	/// </summary>
	private OrientedGraph CreateFieldsGraph(Dictionary<String, FieldInfo> fields)
	{
		OrientedGraph FieldsGraph = new OrientedGraph(); // граф зависимости полей сделки
		
		// add graph nodes
		foreach (var field in fields.Keys)
		{
			FieldsGraph.AddNode(field);
			
			// add graph transitions
			foreach (var fieldList in fields.Values)
			{
				// nH. Пропустить ребра, направленные в поле, которое изменилось.
				//if (startField != null && !startField.Equals(field.Name, StringComparison.Ordinal))
			
				foreach (var param in fieldList.lParamInfo.Where(p=>!p.IsDeleted))
				{
					if (param != null && FieldsGraph.ContainsNode(param.FieldName))
					{
						FieldsGraph.AddInTrans(field, param.FieldName);
					}
				}
			
			}
        }
		return FieldsGraph;

	}


        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public class T4GeneratorBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
